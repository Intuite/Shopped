// User has Authorities (auto generated both)

application {
  config {
    baseName Shopped
    applicationType monolith
    authenticationType session
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme materia
    databaseType sql
    devDatabaseType mysql
    prodDatabaseType mysql
    enableHibernateCache true
    languages [en]
    nativeLanguage en
    packageName com.intuite.shopped,
	serverPort 8080,
    testFrameworks [protractor]
  }
  entities *
}

/**
  * Users for shopped that
  * is composed with User.
  * @author Isaac Miranda
**/
entity UserProfile {
    description String,
    birthDate LocalDate,
    image ImageBlob,
    status Status
}

/**
  * Statuses for multiple
  * entities.
  * @author Isaac Miranda
**/
enum Status {
    ACTIVE(Active),
    INACTIVE(Inactive),
    BLOCKED(Blocked),
    PENDING(Pending)
}

/**
 * For the user money.
 * @author Isaac Miranda
 */
entity Cookies {
	/**
   	 * Cookies quantity.
     * @version 1
     */
    amount Integer min(0),
    /**
   	 * Cookies wallet key for
     * Paypal.
     * @version 1
     */
    walletKey String
}

/**
  * When a user follow
  * another user.
  * @author Isaac Miranda
**/
entity Follower {
	created Instant required,
    status Status
}

/**
  * Payment for Cookies
  * with Paypal.
  * @author Isaac Miranda
**/
entity Transaction {
    amount Float required,
    created Instant required,
    description String required,
    cookiesAmount Integer required
}

/**
  * A type for notifications.
  * @author Isaac Miranda
**/
entity NotificationType {
    name String required,
    status Status
}

/**
  * Account notification.
  * @author Isaac Miranda
**/
entity Notification {
    content String required,
    created Instant required,
    status Status
}

/**
  * Intermediate table for
  * a user that wants to
  * give an a ward to a
  * post.
  * @author Isaac Miranda
**/
entity Commendation {
	date Instant
}

/**
  * A type for any log
  * @author Isaac Miranda
**/
entity LogType {
    name String required,
    template String,
    status Status
}

/**
  * A log for every
  * user.
  * @author Isaac Miranda
**/
entity Log {
    description String required,
    created Instant
}

/**
  * For managing
  * ingredients and recipes.
  * @author Isaac Miranda
**/
entity Cart {
    created Instant required,
    status Status
}


/**
  * Intermediate entity
  * for recipes and carts.
  * @author Isaac Miranda
**/
entity CartHasRecipe {
	status Status
}

/**
  * Comment of a post
  * by a user.
  * @author Isaac Miranda
**/
entity Comment {
	content String required,
    created Instant,
    status Status
}

/**
  * Type for reports.
  * @author Isaac Miranda
**/
entity ReportType {
	name String required,
    text String required,
    status Status
}


/**
  * For reporting
  * comments.
  * @author Isaac Miranda
**/
entity ReportComment {
	created Instant required,
    status Status
}

/**
  * For reporting
  * posts.
  * @author Isaac Miranda
**/
entity ReportPost {
    created Instant required,
    status Status
}

/**
  * Central entity
  * of the app.
  * @author Isaac Miranda
**/
entity Recipe {
    name String required,
    portion Integer min(1),
    description TextBlob required,
    duration Integer,
    creation Instant,
    image ImageBlob,
    status Status
}

/**
  * Intermediate entity
  * for recipes and the
  * users that have
  * access.
  * @author Isaac Miranda
**/
entity RecipeShared {
	status Status
}

/**
  * Save links to
  * recipes.
  * @author Isaac Miranda
**/
entity Collection {
	name String required,
    description String required,
    created Instant,
    image ImageBlob,
    status Status
}

/**
  * Intermediate entity
  * for collectios and
  * recipes.
  * @author Isaac Miranda
**/
entity CollectionHasRecipe {
	status Status
}

/**
  * Ingredients for
  * all recipes.
  * @author Isaac Miranda
**/
entity Ingredient {
	name String required,
    description String required,
    units String required,
    image ImageBlob,
    status Status
}

/**
  * Intermediate entity
  * for ingredients and
  * recipes.
  * @author Isaac Miranda
**/
entity RecipeHasIngredient {
	amount Integer required min(0),
    status Status
}

/**
  * Intermediate entity
  * for cart and
  * ingredients.
  * @author Isaac Miranda
**/
entity CartHasIngredient {
	amount Integer required min(0),
    status Status
}

/**
  * Types for recipe and
  * ingredient tags
  * @author Isaac Miranda
**/
entity TagType {
	name String required,
    description String required,
    status Status
}

/**
  * Tags for recipes.
  * @author Isaac Miranda
**/
entity RecipeTag {
    name String required,
    description String required,
    status Status
}

/**
  * Intermediate entity
  * for recipes and recipe
  * tags.
  * @author Isaac Miranda
**/
entity RecipeHasRecipeTag {
	status Status
}

/**
  * Tags for ingredients.
  * @author Isaac Miranda
**/
entity IngredientTag {
    name String required,
    description String required,
    status Status
}

/**
  * Intermediate entity
  * for ingredient tags
  * and ingredients.
  * @author Isaac Miranda
**/
entity IngredientHasIngredientTag {
	status Status
}

/**
  * For a feedback to
  * the posts through
  * cookies.
  * @author Isaac Miranda
**/
entity Award {
    name String required,
    description String required,
    cost Integer required min(0),
    image ImageBlob,
    status Status
}

/**
  * For recipes posting
  * @author Isaac Miranda
**/
entity Post {
	caption String,
    date Instant required,
    status Status
}

/**
  * For feedback to
  * the posts.
  * @author Isaac Miranda
**/
entity Bite {
	created Instant required,
    status Status
}

/**
  * System messages.
  * @author Isaac Miranda
**/
entity Message {
	text String required,
    description String
}

/**
  * Extra catalogues for
  * multiple functions.
  * @author Isaac Miranda
**/
entity Catalogue {
	idCatalogue String required,
    value String required
}

/**
  * Units for
  * all ingredients.
  * @author Sebastian Soto
**/
entity Unit {
	name String required,
    abbrev String required
}

//OO1
relationship OneToOne {

    /** **/
    UserProfile{user(login)} to User
    //with jpaDerivedIdentifier
    ,

    /**  **/
    Cookies{user(login) required} to User,

    /**  **/
    Post{recipe(name) required} to Recipe{post},
}


//MO1
relationship ManyToOne {
	// Business domain logic

    /**  **/
    Ingredient{unit(abbrev) required} to Unit

    /**  **/
    Follower{userFollowed(login) required} to User,

    /**  **/
    Notification{type(name) required} to NotificationType,

    /**  **/
    Log{type(name) required} to LogType,

    /**  **/
    Comment{post(id) required} to Post,

    /**  **/
    ReportComment{type(name) required} to ReportType,

    /**  **/
    ReportComment{comment(content) required} to Comment,

    /** **/
	Bite{post required} to Post,

    /** **/
    IngredientTag{type(name) required} to TagType,

    /** **/
    RecipeTag{type(name) required} to TagType,

    /**  **/
    ReportPost{type(name) required} to ReportType,

    /**  **/
    ReportPost{post(caption) required} to Post,

    //MANY TO MANY
    /**  **/
    Commendation{post required} to Post,

    /**  **/
    Commendation{award(name) required} to Award,

    /**  **/
    CartHasRecipe{recipe(name) required} to Recipe,

    /**  **/
    CartHasRecipe{cart required} to Cart,

    /**  **/
    RecipeShared{recipe(name) required} to Recipe,

    /**  **/
    RecipeShared{user(login) required} to User,

     /** **/
    CollectionHasRecipe{collection(name) required} to Collection,

    /** **/
    CollectionHasRecipe{recipe(name) required} to Recipe,

    /**  **/
    CartHasIngredient{cart required} to Cart,

    /**  **/
    CartHasIngredient{ingredient(name) required} to Ingredient,

     /**  **/
    RecipeHasIngredient{ingredient(name) required} to Ingredient,

    /**  **/
    RecipeHasIngredient{recipe(name) required} to Recipe,

    /**  **/
    RecipeHasRecipeTag{recipe(name) required} to Recipe,

    /**  **/
    RecipeHasRecipeTag{recipeTag(name) required} to RecipeTag,

    /**  **/
    IngredientHasIngredientTag{ingredient(name) required} to Ingredient,

    /**  **/
    IngredientHasIngredientTag{ingredientTag(name) required} to IngredientTag,

    ///** **/
    //UserProfile{country(value)} to Catalogue,
}

//MO2
relationship ManyToOne {
 	// To User

    /**  **/
    Transaction{user(login) required} to User,

    /**  **/
    Commendation{user(login) required} to User,

    /**  **/
    Notification{user(login) required} to User,

    /**  **/
    Log{user(login) required} to User,

    /**  **/
    Follower{user(login) required} to User,

    /**  **/
    Bite{user(login) required} to User,

  	/**  **/
    Cart{user(login) required} to User,

    /** **/
    ReportComment{user(login) required} to User,

    /** **/
    ReportPost{user(login) required} to User,

    /** **/
    Comment{user(login) required} to User,

    /** **/
    Recipe{user(login) required} to User,

    /**  **/
    Collection{user(login) required} to User,

    /**  **/
    Post{user(login) required} to User,
}

//MO4

//Options

service all with serviceImpl
service all with serviceClass
dto * with mapstruct
paginate * with pagination
filter *
